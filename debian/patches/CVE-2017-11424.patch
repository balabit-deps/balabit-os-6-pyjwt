From 1922f0972b065077404c0dafa0946f2132400a2b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jos=C3=A9=20Padilla?= <jpadilla@webapplicate.com>
Date: Wed, 21 Jun 2017 15:49:41 -0400
Subject: [PATCH] Throw if key is an PKCS1 PEM-encoded public key


---
 jwt/algorithms.py                | 1 +
 tests/keys/testkey_pkcs1.pub.pem | 5 +++++
 tests/test_algorithms.py         | 7 +++++++
 3 files changed, 13 insertions(+)
 create mode 100644 tests/keys/testkey_pkcs1.pub.pem

Index: pyjwt-1.3.0/jwt/algorithms.py
===================================================================
--- pyjwt-1.3.0.orig/jwt/algorithms.py
+++ pyjwt-1.3.0/jwt/algorithms.py
@@ -121,6 +121,7 @@ class HMACAlgorithm(Algorithm):
         invalid_strings = [
             b'-----BEGIN PUBLIC KEY-----',
             b'-----BEGIN CERTIFICATE-----',
+            b'-----BEGIN RSA PUBLIC KEY-----',
             b'ssh-rsa'
         ]
 
Index: pyjwt-1.3.0/tests/keys/testkey_pkcs1.pub.pem
===================================================================
--- /dev/null
+++ pyjwt-1.3.0/tests/keys/testkey_pkcs1.pub.pem
@@ -0,0 +1,5 @@
+-----BEGIN RSA PUBLIC KEY-----
+MIGHAoGBAOV/0Vl/5VdHcYpnILYzBGWo5JQVzo9wBkbxzjAStcAnTwvv1ZJTMXs6
+fjz91f9hiMM4Z/5qNTE/EHlDWxVdj1pyRaQulZPUs0r9qJ02ogRRGLG3jjrzzbzF
+yj/pdNBwym0UJYC/Jmn/kMLwGiWI2nfa9vM5SovqZiAy2FD7eOtVAgED
+-----END RSA PUBLIC KEY-----
Index: pyjwt-1.3.0/tests/test_algorithms.py
===================================================================
--- pyjwt-1.3.0.orig/tests/test_algorithms.py
+++ pyjwt-1.3.0/tests/test_algorithms.py
@@ -88,6 +88,13 @@ class TestAlgorithms:
             with open(key_path('testkey2_rsa.pub.pem'), 'r') as keyfile:
                 algo.prepare_key(keyfile.read())
 
+    def test_hmac_should_throw_exception_if_key_is_pkcs1_pem_public(self):
+        algo = HMACAlgorithm(HMACAlgorithm.SHA256)
+
+        with pytest.raises(InvalidKeyError):
+            with open(key_path('testkey_pkcs1.pub.pem'), 'r') as keyfile:
+                algo.prepare_key(keyfile.read())
+
     @pytest.mark.skipif(not has_crypto, reason='Not supported without cryptography library')
     def test_rsa_should_parse_pem_public_key(self):
         algo = RSAAlgorithm(RSAAlgorithm.SHA256)
